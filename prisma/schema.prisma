// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  password       String?
  isAdmin        Boolean   @default(false)
  listedProducts Product[] ///for admins

  Account Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerifyToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  @@unique([email, token])
}

model Product {
  id           String   @id @default(cuid())
  name         String
  description  String?
  images       String[]
  priceInCents Int
  inStock      Boolean ///for user to view
  stock        Int ///for admin to view
  rating       Int
  seller       User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([name])
}

model Review {
  id String @id @default(cuid())
}

///many to many
model Order {
  id String @id @default(cuid())
}

model Wishlist {
  id String @id @default(cuid())
}
